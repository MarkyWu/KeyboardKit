{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re new to iOS keyboard extensions, "},{"type":"reference","isActive":true,"identifier":"https:\/\/shyngys.com\/ios-custom-keyboard-guide"},{"type":"text","text":" will help you get started. You can also have a look at the demo apps for examples and inspiration."}]},{"anchor":"How-to-use-KeyboardKit","level":2,"type":"heading","text":"How to use KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use KeyboardKit in many different ways:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keyboard extensions can use KeyboardKit to create more powerful keyboards."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can use KeyboardKit to check if a keyboard is enabled, has full access etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can create custom input controllers and use KeyboardKit for the text field."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Other targets, like widgets can use KeyboardKit to build upon its functionality."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit supports iOS, iPadOS, macOS, tvOS and watchOS, although some functionality is only available on some platforms."}]},{"anchor":"How-to-install-KeyboardKit","level":2,"type":"heading","text":"How to install KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit can be installed with the Swift Package Manager:"}]},{"type":"codeListing","syntax":null,"code":["https:\/\/github.com\/KeyboardKit\/KeyboardKit.git"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"or with CocoaPods:"}]},{"type":"codeListing","syntax":null,"code":["pod KeyboardKit"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add the library to the main app, the keyboard extension and any other targets that need it."}]},{"anchor":"How-to-setup-KeyboardKit","level":2,"type":"heading","text":"How to setup KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your keyboard extension, "},{"type":"codeVoice","code":"import KeyboardKit"},{"type":"text","text":" then make "},{"type":"codeVoice","code":"KeyboardViewController"},{"type":"text","text":" inherit "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inheriting "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" gives your controller access to a lot of additional functionality, such as new lifecycle functions like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":", observable properties like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext"},{"type":"text","text":", keyboard services like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" and much more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your controller will call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":" when the keyboard should be created. You can then use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/setup(with:)"},{"type":"text","text":" to make the keyboard extension use any "},{"type":"codeVoice","code":"SwiftUI"},{"type":"text","text":" view, for instance:"}]},{"type":"codeListing","syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {","","    func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup(with: MyKeyboardView())","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will make the view you use the main view of the keyboard extension, which makes the extension size to fit its content. It also injects all observable properties as environment objects into the view hierarchy, to ensure that the view updates whenever they change."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to create a standard keyboard that imitates the iOS stock keyboard, you can use a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard"},{"type":"text","text":";"}]},{"type":"codeListing","syntax":"swift","code":["struct MyKeyboardView: View {","    ","    @State","    private var text = \"Text\"","    ","    @EnvironmentObject","    private var autocompleteContext: AutocompleteContext","","    @EnvironmentObject","    private var keyboardContext: KeyboardContext","    ","    var body: some View {","        VStack(spacing: 0) {","            if keyboardContext.keyboardType != .emojis {","                AutocompleteToolbar(","                    suggestions: autocompleteContext.suggestions,","                    locale: keyboardContext.locale","                )","            }","            SystemKeyboard()","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view above creates a system keyboard with an autocomplete toolbar that only shows when the system keyboard doesn’t display an emojis keyboard. The view will automatically update when things change, such as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext\/keyboardType"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important that the view observes the global "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext"},{"type":"text","text":", either by using the injected environment object or by setting it up as an observed object, otherwise it will be unresponsive to context changes. If your view doesn’t react when you change keyboard type, this is most probably the cause."}]},{"anchor":"How-to-use-the-standard-keyboard-configuration","level":2,"type":"heading","text":"How to use the standard keyboard configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you inherit "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" and launch your extension, the controller will by default be configured with a bunch of observable properties and services."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All observable properties will be injected into the view hierarchy when you setup KeyboardKit with a view, which means that you can use environment objects to observe the state of these properties."}]},{"type":"codeListing","syntax":"swift","code":["struct MyButton: View {","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        Button(\"Insert banana!\") {","            context.textDocumentProxy.insertText(\"Banana!\")","        }.disabled(context.keyboardType == .emojis)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All services will be configured with standard implementations when KeyboardKit is started. For instance, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" is initialized with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler"},{"type":"text","text":". All services can be replaced with your own custom implementations."}]},{"anchor":"How-to-observe-changes","level":2,"type":"heading","text":"How to observe changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access observable objects that are injected into the view hierarchy, you can use "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":", for instance:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also inject an observable object into an initializer and setup an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    ","    init(context: KeyboardContext) {","       _context = ObservedObject(wrappedValue: context)","    }","    ","    @ObservedObject private var context: KeyboardContext","    ","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use any of these options as you see fit. Environment objects are convenient, but KeyboardKit itself uses init injection, since it makes dependencies more explicit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a bunch of KeyboardKit-specific environment objects that can provide you with important information, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/AutocompleteContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/InputCalloutContext"},{"type":"text","text":" etc."}]},{"anchor":"How-to-use-keyboard-services","level":2,"type":"heading","text":"How to use keyboard services"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike contexts, services can’t be injected into the view hierarchy and resolved using environment objects. You must instead inject any services you want to use into your types, for instance via the initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    init(actionHandler: KeyboardActionHandler) {","        self.actionHandler = actionHandler","    }","","    private let actionHandler: KeyboardActionHandler","","    var body: some View {","        Button(action: { actionHandler.handle(.tap, on: .space) }) {","            Text(\"Custom space bar\")","                .padding()","                .background(Color.green)","                .cornerRadius(10)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the view uses an injected action handler to trigger a “tap on space” action."}]},{"anchor":"How-to-customize-the-standard-configuration","level":2,"type":"heading","text":"How to customize the standard configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can easily customize the standard configuration by replacing the standard services with your own custom implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, say that you have a custom keyboard action handler:"}]},{"type":"codeListing","syntax":"swift","code":["class MyActionHandler: StandardActionHandler {","","    open override func canHandle(_ gesture: KeyboardGesture, on action: KeyboardAction) -> Bool {","        false   \/\/ Wow, what a useless action handler! ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use this action handler instead of the standard one, by setting "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" to that new type:"}]},{"type":"codeListing","syntax":"swift","code":["class MyKeyboardViewController: KeyboardInputViewController {","","    override func viewDidLoad() {","        keyboardActionHandler = MyActionHandler(inputViewController: self)","        super.viewDidLoad()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should customize your services in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()"},{"type":"text","text":" before any services have been resolved. This way, any inter-dependencies between the services will be properly resolved."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to configure KeyboardKit at a later state, make sure that the service that you replace isn’t used in another service. If so, you must re-create that service as well, to avoid having the old service instance still hanging around."}]},{"anchor":"Going-further","level":2,"type":"heading","text":"Going further"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you followed the example above, you should now have a basic understanding of how to setup KeyboardKit with a custom view, as well as how to use the various keyboard services and observable state and how to customize the standard configuration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information and examples, take a look at the demo apps, which replace many services with demo-specific implementations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/keyboardkit\/getting-started"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Getting-Started","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This article discusses how get started using KeyboardKit in your app."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started","role":"article","modules":[{"name":"KeyboardKit"}]},"hierarchy":{"paths":[["doc:\/\/KeyboardKit\/documentation\/KeyboardKit"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Actions","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Appearances","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Autocomplete","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Emojis","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Feedback","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Input-Sets","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Layout","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Localization","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Previews","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Proxy-Extensions","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Text-Routing"],"generated":true}],"references":{"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Actions":{"role":"article","title":"Understanding Actions","abstract":[{"type":"text","text":"This article describes the KeyboardKit action engine and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Actions","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-actions"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/setup(with:)":{"role":"symbol","title":"setup(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setup"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":">("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Content","preciseIdentifier":"s:11KeyboardKit0A19InputViewControllerC5setup4withyx_t7SwiftUI0D0RzlF7ContentL_xmfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Setup KeyboardKit with a SwiftUI view."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/setup(with:)","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/setup(with:)"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardContext":{"role":"symbol","title":"keyboardContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardContext","preciseIdentifier":"s:11KeyboardKit0A7ContextC"}],"abstract":[{"type":"text","text":"The default, observable keyboard context."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Localization":{"role":"article","title":"Understanding Localization","abstract":[{"type":"text","text":"This article describes the KeyboardKit localization model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Localization","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-localization"},"doc://KeyboardKit/documentation/KeyboardKit/InputCalloutContext":{"role":"symbol","title":"InputCalloutContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"InputCalloutContext"}],"abstract":[{"type":"text","text":"This context can be used to handle callouts that show a big"},{"type":"text","text":" "},{"type":"text","text":"version of the currently typed character."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/InputCalloutContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InputCalloutContext"}],"url":"\/documentation\/keyboardkit\/inputcalloutcontext"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Autocomplete":{"role":"article","title":"Understanding Autocomplete","abstract":[{"type":"text","text":"This article describes the KeyboardKit autocomplete engine and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Autocomplete","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-autocomplete"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Input-Sets":{"role":"article","title":"Understanding Input Sets","abstract":[{"type":"text","text":"This article describes the KeyboardKit input set model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Input-Sets","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-input-sets"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Text-Routing":{"role":"article","title":"Understanding Text Routing","abstract":[{"type":"text","text":"This article describes how KeyboardKit adds ways for you to route text to other text fields within the keyboard."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Text-Routing","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-text-routing"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewWillSetupKeyboard()":{"role":"symbol","title":"viewWillSetupKeyboard()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewWillSetupKeyboard"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This function is called whenever the keyboard should be"},{"type":"text","text":" "},{"type":"text","text":"created or updated."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewwillsetupkeyboard()"},"doc://KeyboardKit/documentation/KeyboardKit/AutocompleteContext":{"role":"symbol","title":"AutocompleteContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutocompleteContext"}],"abstract":[{"type":"text","text":"This is an observable class that can be used to store a set"},{"type":"text","text":" "},{"type":"text","text":"of autocomplete suggestions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/AutocompleteContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AutocompleteContext"}],"url":"\/documentation\/keyboardkit\/autocompletecontext"},"doc://KeyboardKit/documentation/KeyboardKit":{"role":"collection","title":"KeyboardKit","abstract":[{"type":"text","text":"KeyboardKit helps you build custom keyboards with Swift and SwiftUI."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController":{"role":"symbol","title":"KeyboardInputViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardInputViewController"}],"abstract":[{"type":"text","text":"This class extends "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":" with KeyboardKit"},{"type":"text","text":" "},{"type":"text","text":"specific functionality."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardInputViewController"}],"url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Feedback":{"role":"article","title":"Understanding Feedback","abstract":[{"type":"text","text":"This article describes the KeyboardKit feedback engine and how to use it to get audio and haptic feedback."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Feedback","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-feedback"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewDidLoad()":{"role":"symbol","title":"viewDidLoad()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewDidLoad"},{"kind":"text","text":"()"}],"abstract":[],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewdidload()"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Appearances":{"role":"article","title":"Understanding Appearances","abstract":[{"type":"text","text":"This article describes the KeyboardKit appearance engine and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Appearances","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-appearances"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardContext":{"role":"symbol","title":"KeyboardContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardContext"}],"abstract":[{"type":"text","text":"This class provides keyboard extensions with contextual and"},{"type":"text","text":" "},{"type":"text","text":"observable keyboard state."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardContext"}],"url":"\/documentation\/keyboardkit\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardActionHandler":{"role":"symbol","title":"keyboardActionHandler","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardActionHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardActionHandler","preciseIdentifier":"s:11KeyboardKit0A13ActionHandlerP"}],"abstract":[{"type":"text","text":"This action handler is used to handle actions that will"},{"type":"text","text":" "},{"type":"text","text":"be triggered when the keyboard is being."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Emojis":{"role":"article","title":"Understanding Emojis","abstract":[{"type":"text","text":"This article describes the KeyboardKit emoji model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Emojis","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-emojis"},"doc://KeyboardKit/documentation/KeyboardKit/SystemKeyboard":{"role":"symbol","title":"SystemKeyboard","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SystemKeyboard"}],"abstract":[{"type":"text","text":"This view mimics native iOS system keyboards, like standard"},{"type":"text","text":" "},{"type":"text","text":"alphabetic, numeric and symbolic system keyboards."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SystemKeyboard"}],"url":"\/documentation\/keyboardkit\/systemkeyboard"},"doc://KeyboardKit/documentation/KeyboardKit/StandardKeyboardActionHandler":{"role":"symbol","title":"StandardKeyboardActionHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"abstract":[{"type":"text","text":"This standard keyboard action handler is used by default by"},{"type":"text","text":" "},{"type":"text","text":"KeyboardKit and provides a standard way of handling actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"url":"\/documentation\/keyboardkit\/standardkeyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Proxy-Extensions":{"role":"article","title":"Understanding Proxy Extensions","abstract":[{"type":"text","text":"This article describes how KeyboardKit extends "},{"type":"codeVoice","code":"UITextDocumentProxy"},{"type":"text","text":" with a lot of additional functionality."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Proxy-Extensions","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-proxy-extensions"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Layout":{"role":"article","title":"Understanding Layouts","abstract":[{"type":"text","text":"This article describes the KeyboardKit keyboard layout engine and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Layout","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-layout"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardContext/keyboardType":{"role":"symbol","title":"keyboardType","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardType","preciseIdentifier":"s:11KeyboardKit0A4TypeO"}],"abstract":[{"type":"text","text":"The keyboard type that is currently used."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext\/keyboardType","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardcontext\/keyboardtype"},"https://shyngys.com/ios-custom-keyboard-guide":{"title":"this great guide","titleInlineContent":[{"type":"text","text":"this great guide"}],"type":"link","identifier":"https:\/\/shyngys.com\/ios-custom-keyboard-guide","url":"https:\/\/shyngys.com\/ios-custom-keyboard-guide"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Previews":{"role":"article","title":"Understanding Previews","abstract":[{"type":"text","text":"This article describes how KeyboardKit makes it easy to preview keyboard-specific views."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Previews","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-previews"}}}